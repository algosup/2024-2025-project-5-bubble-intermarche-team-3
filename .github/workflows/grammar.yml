name: Markdown Grammar and Spelling Check

on:
  push:
    branches: 
      - QualityAssurance  
    paths:
      - '**.md'
  pull_request:
    branches: 
      - QualityAssurance  
    paths:
      - '**.md'
  # Allow manual trigger
  workflow_dispatch:

jobs:
  lint-markdown:
    name: Check Markdown Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install textlint and rules
        run: |
          npm init -y
          npm install --save-dev \
            textlint \
            textlint-rule-spelling \
            textlint-rule-common-misspellings \
            textlint-rule-en-capitalization \
            textlint-rule-terminology \
            textlint-rule-no-dead-link \
            textlint-rule-write-good \
            textlint-rule-alex \
            textlint-rule-no-empty-section \
            textlint-rule-stop-words
      
      - name: Create textlint config
        run: |
          cat > .textlintrc <<EOF
          {
            "rules": {
              "spelling": true,
              "common-misspellings": true,
              "en-capitalization": true,
              "terminology": true,
              "write-good": {
                "severity": "warning"
              },
              "alex": {
                "severity": "warning"
              },
              "no-empty-section": true,
              "stop-words": {
                "severity": "warning"
              }
            }
          }
          EOF
      
      - name: Run Markdown linting
        id: lint
        run: |
          # Create a temporary file to store errors
          echo "[]" > errors.json
          # Find only markdown files and check them
          find . -type f -name "*.md" -not -path "*/node_modules/*" -not -path "*/\.*" | while read file; do
            echo "Checking $file..."
            # Run textlint and capture the output
            ./node_modules/.bin/textlint --format json "$file" > lint_output.json || true
            # Process the output and add to errors.json if there are issues
            if [ -s lint_output.json ]; then
              # Extract file path, line numbers, and messages
              jq -r '.messages[] | {file: .ruleId, line: .line, message: .message, severity: .severity}' lint_output.json > temp.json
              # Append the current file's errors to our errors array
              jq -s '.[0] + [.[1] | . + {file: "'$file'"}]' errors.json temp.json > combined.json
              mv combined.json errors.json
              echo "::error file=$file::Found grammar/spelling issues"
              ERRORS_FOUND=true
            fi
          done
          
          # Check if we found any errors
          if [ "$(jq '. | length' errors.json)" -gt 0 ]; then
            echo "errors_found=true" >> $GITHUB_OUTPUT
          else
            echo "errors_found=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Markdown Report
        if: steps.lint.outputs.errors_found == 'true'
        run: |
          echo "# Markdown Linting Report" > linting_report.md
          echo "" >> linting_report.md
          echo "Grammar and spelling issues were found in the following files:" >> linting_report.md
          echo "" >> linting_report.md
          
          # Group errors by file
          jq -r 'group_by(.file) | .[] | "## \(.[0].file)\n\n" + (.[] | "- Line \(.line): \(.message) (\(.file))\n")' errors.json >> linting_report.md
      
      - name: Upload linting report
        if: steps.lint.outputs.errors_found == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: markdown-linting-report
          path: linting_report.md
      
      - name: Create Issue for Spelling and Grammar Issues
        if: steps.lint.outputs.errors_found == 'true' && github.event_name != 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const branch = context.ref.replace('refs/heads/', '');
            
            // Read the errors.json file
            const errors = JSON.parse(fs.readFileSync('errors.json', 'utf8'));
            
            // Group errors by file
            const errorsByFile = {};
            errors.forEach(error => {
              if (!errorsByFile[error.file]) {
                errorsByFile[error.file] = [];
              }
              errorsByFile[error.file].push({
                line: error.line,
                message: error.message,
                rule: error.file
              });
            });
            
            // Create the issue body
            let issueBody = `## Spelling and grammar issues found in markdown files\n\n`;
            issueBody += `Branch: \`${branch}\`\n\n`;
            
            // Add details for each file
            for (const [file, fileErrors] of Object.entries(errorsByFile)) {
              issueBody += `### ${file}\n`;
              fileErrors.forEach(error => {
                const severity = error.severity === 2 ? 'ðŸ”´' : 'ðŸŸ¡';
                issueBody += `- ${severity} **Line ${error.line}**: ${error.message} (_${error.rule}_)\n`;
              });
              issueBody += '\n';
            }
            
            issueBody += `\n### How to fix these issues\n\n`;
            issueBody += `1. Review the reported issues in each file\n`;
            issueBody += `2. Make the necessary corrections\n`;
            issueBody += `3. Commit and push your changes\n`;
            issueBody += `4. The workflow will run again to verify your fixes\n\n`;
            issueBody += `_This issue was automatically generated by the Markdown Grammar and Spelling Check workflow._`;
            
            // Check if there's an existing open issue for this branch
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              labels: ['documentation', 'automated']
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(`Markdown Issues in ${branch}`)
            );
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: existingIssue.number,
                body: issueBody
              });
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const newIssue = await github.rest.issues.create({
                owner,
                repo,
                title: `Markdown Issues in ${branch} Branch`,
                body: issueBody,
                labels: ['documentation', 'grammar', 'spelling', 'automated']
              });
              console.log(`Created new issue #${newIssue.data.number}`);
            }
      
      - name: Add PR Comment
        if: steps.lint.outputs.errors_found == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the markdown report
            const reportContent = fs.readFileSync('linting_report.md', 'utf8');
            
            // Add a comment to the PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reportContent + "\n\nPlease fix these issues before merging this PR."
            });
      
      # Fail the workflow if errors were found
      - name: Check results
        if: steps.lint.outputs.errors_found == 'true'
        run: |
          echo "::error::Grammar and spelling issues found in markdown files. See the linting report for details."
          exit 1