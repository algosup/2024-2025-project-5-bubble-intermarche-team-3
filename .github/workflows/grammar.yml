name: Spell and Grammar Check

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches-ignore:
      - main

# Add permissions block at the workflow level
permissions:
  issues: write
  contents: read

jobs:
  spell-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g textlint
          npm install -g textlint-rule-common-misspellings
          npm install -g textlint-rule-no-dead-link
          npm install -g textlint-rule-spelling
          npm install -g textlint-rule-max-comma

      - name: Create textlint configuration
        run: |
          echo '{
            "rules": {
              "common-misspellings": true,
              "no-dead-link": true,
              "spelling": {
                "language": "en",
                "skipPatterns": [
                  "/(http|https):\\/\\/[^\\s]*/",
                  "/\\\\[.*?\\\\]\\\\(.*?\\\\)/",
                  "/`[^`]*`/"
                ]
              },
              "max-comma": {
                "max": 4
              }
            }
          }' > .textlintrc

      - name: Run spell check and collect all errors
        id: check
        run: |
          # Create an array to store all errors
          echo "[]" > all_errors.json
          
          # Find all markdown files
          files=$(find . -type f -name "*.md" -not -path "*/node_modules/*" -not -path "*/\.*")
          
          # Check each file and collect errors
          has_errors=false
          
          for file in $files; do
            echo "Checking $file..."
            
            # Run textlint on the file
            textlint --format json "$file" > "temp_output.json" || true
            
            # Check if there are errors and append them to all_errors.json
            if [ -s "temp_output.json" ]; then
              # Extract errors and add file information
              errors=$(jq -r '.[0].messages | length' "temp_output.json")
              
              if [ "$errors" -gt 0 ]; then
                echo "Found $errors issues in $file"
                has_errors=true
                
                # Transform and append errors
                jq -r '.[0].messages[] | {
                  file: "'"$file"'",
                  line: .line,
                  column: .column,
                  message: .message,
                  ruleId: .ruleId
                }' "temp_output.json" >> temp_errors.json
              else
                echo "No issues found in $file"
              fi
            fi
          done
          
          # Combine all errors into a proper JSON array
          if [ -f temp_errors.json ]; then
            echo "[" > all_errors.json
            cat temp_errors.json | tr '\n' ',' | sed 's/,$//' >> all_errors.json
            echo "]" >> all_errors.json
            
            # Print total error count
            total_errors=$(grep -c "{" temp_errors.json || echo 0)
            echo "Found $total_errors total issues"
            
            if [ "$total_errors" -gt 0 ]; then
              echo "::set-output name=has_errors::true"
              exit 1
            fi
          else
            echo "[]" > all_errors.json
            echo "No errors found in any files"
          fi

      - name: Create detailed issue with all errors
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = context.ref.replace('refs/heads/', '');
            
            // Read collected errors
            const fs = require('fs');
            let errors = [];
            
            try {
              const fileContent = fs.readFileSync('all_errors.json', 'utf8');
              errors = JSON.parse(fileContent);
            } catch (error) {
              console.error('Error reading error file:', error);
              errors = [];
            }
            
            // Group errors by file
            const errorsByFile = {};
            
            for (const error of errors) {
              if (!errorsByFile[error.file]) {
                errorsByFile[error.file] = [];
              }
              
              errorsByFile[error.file].push({
                line: error.line,
                message: error.message,
                ruleId: error.ruleId
              });
            }
            
            // Create issue body in the exact format requested
            let issueBody = `Spelling and Writing Style Issues Found in ${branch}\n\n`;
            
            for (const [filePath, fileErrors] of Object.entries(errorsByFile)) {
              issueBody += `### ${filePath}\n`;
              
              fileErrors.forEach(error => {
                // Create friendly error messages based on rule type
                let errorMessage = '';
                
                if (error.ruleId === 'common-misspellings') {
                  const match = error.message.match(/"([^"]+)" is a misspelling of "([^"]+)"/);
                  if (match) {
                    errorMessage = `"${match[1]}" is a misspelling of "${match[2]}"`;
                  } else {
                    errorMessage = error.message;
                  }
                } else if (error.ruleId === 'spelling') {
                  const match = error.message.match(/Unknown word: (.+)/);
                  if (match) {
                    errorMessage = `"${match[1]}" might be misspelled. Check the spelling.`;
                  } else {
                    errorMessage = error.message;
                  }
                } else if (error.ruleId === 'max-comma') {
                  errorMessage = `Too many commas in this sentence. Consider restructuring.`;
                } else {
                  errorMessage = error.message;
                }
                
                issueBody += `- Line ${error.line}: ${errorMessage}\n`;
              });
              
              issueBody += '\n';
            }
            
            issueBody += `Please fix these issues to maintain document quality.`;
            
            // Create the issue
            try {
              const issue = await github.rest.issues.create({
                owner,
                repo,
                title: `Spelling and Writing Style Issues Found in ${branch} Branch`,
                body: issueBody,
                labels: ['documentation', 'spelling', 'grammar']
              });
              
              console.log(`Issue created successfully`);
            } catch (error) {
              console.error('Error creating issue:', error);
            }