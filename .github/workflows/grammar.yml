name: Spell and Grammar Check

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches-ignore:
      - main

# Add permissions block at the workflow level
permissions:
  issues: write
  contents: read

jobs:
  spell-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g textlint
          npm install -g textlint-rule-common-misspellings
          npm install -g textlint-rule-no-dead-link
          npm install -g textlint-rule-terminology
          npm install -g textlint-rule-en-spell
          npm install -g textlint-rule-write-good
          npm install -g textlint-rule-en-capitalization
          npm install -g textlint-rule-apostrophe
          npm install -g textlint-rule-diacritics
          npm install -g textlint-rule-stop-words

      - name: Create textlint configuration
        run: |
          echo '{
            "rules": {
              "common-misspellings": true,
              "no-dead-link": true,
              "en-spell": true,
              "terminology": true,
              "write-good": {
                "passive": true,
                "thereIs": true,
                "adverb": true,
                "tooWordy": true,
                "cliches": true
              },
              "en-capitalization": true,
              "apostrophe": true,
              "diacritics": true,
              "stop-words": true
            }
          }' > .textlintrc

      - name: Create error file
        run: |
          echo "[]" > errors.json

      - name: Run spell and grammar check
        id: check
        run: |
          # Find only markdown files and check them
          find . -type f -name "*.md" -not -path "*/node_modules/*" -not -path "*/\.*" | while read file; do
            echo "Checking $file..."
            # Run textlint with all installed rules
            textlint --format json "$file" > "lint_output_$file.json" || true
            
            # Process the output and add to errors.json if there are issues
            if [ -s "lint_output_$file.json" ]; then
              errors=$(jq -r '.[].messages | length' "lint_output_$file.json")
              if [ "$errors" -gt 0 ]; then
                echo "Found $errors issues in $file"
                jq -r '.[].messages[] | {file: input_filename, line: .line, column: .column, message: .message, ruleId: .ruleId}' --arg input_filename "$file" "lint_output_$file.json" >> errors_temp.json
              fi
            fi
          done
          
          # Combine all errors and format as proper JSON array
          echo "[" > errors.json
          if [ -f "errors_temp.json" ]; then
            cat errors_temp.json | tr '\n' ',' | sed 's/,$//' >> errors.json
          fi
          echo "]" >> errors.json
          
          # Check if any errors were found
          errorCount=$(jq '. | length' errors.json)
          echo "Found $errorCount total issues."
          
          if [ "$errorCount" -gt 0 ]; then
            echo "Errors found in markdown files"
            exit 1
          fi

      - name: Create Issue for Spelling and Grammar Issues
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = context.ref.replace('refs/heads/', '');
            
            // Read the errors.json file
            const fs = require('fs');
            let errors = [];
            try {
              const fileContent = fs.readFileSync('errors.json', 'utf8');
              errors = JSON.parse(fileContent);
            } catch (error) {
              console.error('Error reading errors.json:', error);
            }
            
            // Group errors by file
            const errorsByFile = {};
            errors.forEach(error => {
              if (!errorsByFile[error.file]) {
                errorsByFile[error.file] = [];
              }
              errorsByFile[error.file].push({
                line: error.line,
                column: error.column,
                message: error.message,
                ruleId: error.ruleId
              });
            });
            
            // Create the issue body
            let issueBody = `# Spelling and Grammar Issues Found\n\nBranch: \`${branch}\`\n\n`;
            
            // Add details for each file
            for (const [file, fileErrors] of Object.entries(errorsByFile)) {
              issueBody += `## ${file}\n`;
              fileErrors.forEach(error => {
                issueBody += `- **Line ${error.line}:${error.column}** - ${error.message}\n`;
                
                // Add suggestions based on rule type
                switch(error.ruleId) {
                  case "common-misspellings":
                    issueBody += `  - *Suggestion*: This appears to be a common misspelling. Check the correct spelling.\n`;
                    break;
                  case "en-spell":
                    issueBody += `  - *Suggestion*: This word may be misspelled. Verify the correct spelling.\n`;
                    break;
                  case "write-good":
                    issueBody += `  - *Suggestion*: Consider rephrasing for clarity and conciseness.\n`;
                    break;
                  case "en-capitalization":
                    issueBody += `  - *Suggestion*: Check capitalization rules for proper nouns, titles, and sentence beginnings.\n`;
                    break;
                  case "apostrophe":
                    issueBody += `  - *Suggestion*: Verify apostrophe usage for possessives and contractions.\n`;
                    break;
                  case "stop-words":
                    issueBody += `  - *Suggestion*: Consider using more precise language instead of vague words.\n`;
                    break;
                  default:
                    issueBody += `  - *Suggestion*: Review and correct according to English grammar and spelling rules.\n`;
                }
              });
              issueBody += '\n';
            }
            
            issueBody += `## How to fix these issues\n\n`;
            issueBody += `1. Review each error and make the necessary corrections\n`;
            issueBody += `2. For spelling errors, verify the correct spelling in a dictionary\n`;
            issueBody += `3. For grammar errors, consider rephrasing sentences for clarity\n`;
            issueBody += `4. For capitalization errors, follow standard English capitalization rules\n`;
            issueBody += `5. For punctuation errors, verify proper usage of commas, apostrophes, etc.\n\n`;
            issueBody += `Please fix these issues to maintain document quality.`;
            
            try {
              await github.rest.issues.create({
                owner,
                repo,
                title: `Spelling and Grammar Issues Found in ${branch} Branch`,
                body: issueBody,
                labels: ['spelling', 'grammar', 'documentation']
              });
              console.log("Issue created successfully");
            } catch (error) {
              console.error('Error creating issue:', error);
              console.error('Error details:', JSON.stringify(error, null, 2));
            }